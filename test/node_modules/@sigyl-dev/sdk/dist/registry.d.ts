import type { MCPPackage, PackageWithDetails, PackageSearchResult, CreatePackageRequest, SDKConfig, MCPTool } from './types';
/**
 * Search for MCP packages in the registry
 * Note: Search is typically public, but can be restricted if requireAuth is true
 */
export declare function searchPackages(query?: string, tags?: string[], limit?: number, offset?: number, config?: SDKConfig): Promise<PackageSearchResult>;
/**
 * Get detailed information about a specific package
 * Note: Package details are typically public, but can be restricted if requireAuth is true
 */
export declare function getPackage(name: string, config?: SDKConfig): Promise<PackageWithDetails>;
/**
 * Register a new MCP package in the registry
 * Note: Registration ALWAYS requires authentication
 */
export declare function registerMCP(packageData: CreatePackageRequest, apiKey?: string, config?: SDKConfig): Promise<MCPPackage>;
/**
 * Get all packages (admin operation)
 * Note: This requires admin API key with admin permissions
 */
export declare function getAllPackagesAdmin(config?: SDKConfig): Promise<MCPPackage[]>;
/**
 * Manually invoke a tool by URL
 * Note: Tool invocation may require authentication depending on the tool
 */
export declare function invoke(toolUrl: string, input: any, config?: SDKConfig): Promise<any>;
/**
 * Retrieve MCP server URL and metadata by package name
 */
export declare function getMCPServerUrlByName(name: string, config?: SDKConfig): Promise<{
    url: string;
    package: MCPPackage;
} | null>;
/**
 * Semantic search for MCP servers (packages)
 * @param query - user prompt or search string
 * @param count - number of results to return (default 1)
 */
export declare function semanticSearchMCPServers(query: string, count?: number, config?: SDKConfig): Promise<MCPPackage[]>;
/**
 * Semantic search for tools across all MCP servers
 * @param query - user prompt or search string
 * @param count - number of results to return (default 1)
 */
export declare function semanticSearchTools(query: string, count?: number, config?: SDKConfig): Promise<Array<MCPTool & {
    mcp_server: MCPPackage;
}>>;
//# sourceMappingURL=registry.d.ts.map