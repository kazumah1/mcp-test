import type { SDKConfig, MCPPackage, PackageWithDetails, PackageSearchResult } from './types';
/**
 * MCPConnectSDK - Advanced SDK class for working with MCP registry and tools
 */
export declare class MCPConnectSDK {
    private config;
    /**
     * MCPConnectSDK always uses the Sigyl registry API at https://api.sigyl.dev/api/v1
     * The registryUrl cannot be overridden by user config.
     * @param config - Only apiKey, timeout, and requireAuth are respected
     */
    constructor(config?: SDKConfig);
    /**
     * Search for packages in the registry
     */
    searchPackages(query?: string, tags?: string[], limit?: number, offset?: number): Promise<PackageSearchResult>;
    /**
     * Get detailed information about a specific package
     */
    getPackage(name: string): Promise<PackageWithDetails>;
    /**
     * Search all packages (public operation - limited results)
     * This uses the public search endpoint with a high limit
     */
    searchAllPackages(limit?: number): Promise<MCPPackage[]>;
    /**
     * Get all packages (admin operation - requires admin API key)
     * This calls the admin endpoint that requires admin permissions
     */
    getAllPackages(): Promise<MCPPackage[]>;
    /**
     * Update SDK configuration
     */
    updateConfig(newConfig: Partial<SDKConfig>): void;
    /**
     * Get current SDK configuration
     */
    getConfig(): SDKConfig;
    /**
     * Retrieve MCP server URL and metadata by name
     */
    getMCPServerUrlByName(name: string): Promise<{
        url: string;
        package: MCPPackage;
    } | null>;
    /**
     * Semantic search for MCP servers (packages)
     * @param query - user prompt or search string
     * @param count - number of results to return (default 1)
     */
    semanticSearchMCPServers(query: string, count?: number): Promise<MCPPackage[]>;
    /**
     * Semantic search for tools across all MCP servers
     * @param query - user prompt or search string
     * @param count - number of results to return (default 1)
     */
    semanticSearchTools(query: string, count?: number): Promise<(import("./types").MCPTool & {
        mcp_server: MCPPackage;
    })[]>;
}
//# sourceMappingURL=sdk.d.ts.map