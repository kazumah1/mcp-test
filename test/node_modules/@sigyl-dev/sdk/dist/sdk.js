"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MCPConnectSDK = void 0;
const registry_1 = require("./registry");
/**
 * MCPConnectSDK - Advanced SDK class for working with MCP registry and tools
 */
class MCPConnectSDK {
    /**
     * MCPConnectSDK always uses the Sigyl registry API at https://api.sigyl.dev/api/v1
     * The registryUrl cannot be overridden by user config.
     * @param config - Only apiKey, timeout, and requireAuth are respected
     */
    constructor(config = {}) {
        this.config = {
            registryUrl: 'https://api.sigyl.dev/api/v1',
            timeout: config.timeout || 10000,
            apiKey: config.apiKey,
            requireAuth: config.requireAuth,
        };
    }
    /**
     * Search for packages in the registry
     */
    searchPackages(query_1, tags_1) {
        return __awaiter(this, arguments, void 0, function* (query, tags, limit = 20, offset = 0) {
            return (0, registry_1.searchPackages)(query, tags, limit, offset, this.config);
        });
    }
    /**
     * Get detailed information about a specific package
     */
    getPackage(name) {
        return __awaiter(this, void 0, void 0, function* () {
            return (0, registry_1.getPackage)(name, this.config);
        });
    }
    /**
     * Search all packages (public operation - limited results)
     * This uses the public search endpoint with a high limit
     */
    searchAllPackages() {
        return __awaiter(this, arguments, void 0, function* (limit = 100) {
            const response = yield this.searchPackages(undefined, undefined, limit, 0);
            return response.packages;
        });
    }
    /**
     * Get all packages (admin operation - requires admin API key)
     * This calls the admin endpoint that requires admin permissions
     */
    getAllPackages() {
        return __awaiter(this, void 0, void 0, function* () {
            return (0, registry_1.getAllPackagesAdmin)(this.config);
        });
    }
    /**
     * Update SDK configuration
     */
    updateConfig(newConfig) {
        this.config = Object.assign(Object.assign({}, this.config), newConfig);
    }
    /**
     * Get current SDK configuration
     */
    getConfig() {
        return Object.assign({}, this.config);
    }
    /**
     * Retrieve MCP server URL and metadata by name
     */
    getMCPServerUrlByName(name) {
        return __awaiter(this, void 0, void 0, function* () {
            return (0, registry_1.getMCPServerUrlByName)(name, this.config);
        });
    }
    /**
     * Semantic search for MCP servers (packages)
     * @param query - user prompt or search string
     * @param count - number of results to return (default 1)
     */
    semanticSearchMCPServers(query_1) {
        return __awaiter(this, arguments, void 0, function* (query, count = 1) {
            return (0, registry_1.semanticSearchMCPServers)(query, count, this.config);
        });
    }
    /**
     * Semantic search for tools across all MCP servers
     * @param query - user prompt or search string
     * @param count - number of results to return (default 1)
     */
    semanticSearchTools(query_1) {
        return __awaiter(this, arguments, void 0, function* (query, count = 1) {
            return (0, registry_1.semanticSearchTools)(query, count, this.config);
        });
    }
}
exports.MCPConnectSDK = MCPConnectSDK;
//# sourceMappingURL=sdk.js.map